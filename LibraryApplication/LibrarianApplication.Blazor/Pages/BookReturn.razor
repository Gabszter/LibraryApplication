@page "/return/{memberid:int}"
@using LibrarianApplication.Blazor.Model;
@using LibrarianApplication.Blazor.Services;
@using LibraryApp.Contract;
@inject IPersonService PersonService
@inject IBorrowService BorrowService
@inject NavigationManager NavigationManager

@if (BorrowInfos is null)
{
    <p>Loading...</p>
}
else
{
    <h3>@Person.Name's borrowed books</h3>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>InventoryNumber</th>
                <th>Borrow Date</th>
                <th>Return Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var borrow in BorrowInfos)
            {

                @if (DateTime.Now > borrow.ReturnDate)
                {
                    <tr style="color: red">
                        <td>@borrow.Title</td>
                        <td>@borrow.BorrowDate</td>
                        <td>@borrow.ReturnDate</td>
                        <td><button class="btn btn-primary" @onclick="() => ReturnBook(borrow.InventoryNumber)">Return</button></td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>@borrow.Title</td>
                        <td>@borrow.BorrowDate</td>
                        <td>@borrow.ReturnDate</td>
                        <td><button class="btn btn-primary" @onclick="() => ReturnBook(borrow.InventoryNumber)">Return</button></td>
                    </tr>
                }


            }
        </tbody>
    </table>
    <a href="/" class="btn btn-primary">Back</a>
}

@code {
    [Parameter]
    public int MemberId { get; set; }
    private IEnumerable<BorrowInfo>? BorrowInfos { get; set; }

    private Person? Person { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Person = await PersonService.GetPersonByIdAsync(MemberId);
        BorrowInfos = await BorrowService.GetBorrowByNameAsync(Person.Name);
    }

    private async Task ReturnBook(int InventoryNumber)
    {
        IEnumerable<Borrow>? borrowsTmp = await BorrowService.GetAllBorrowsAsync();
        await BorrowService.DeleteBorrowsAsync(borrowsTmp.First(x => x.InventoryNumber == InventoryNumber).Id);
        NavigationManager.NavigateTo($"/return/{MemberId}", true);
    }
}
