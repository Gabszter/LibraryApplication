@page "/books/return/{memberid:int}"
@using LibrarianApplication.Blazor.Model;
@using LibrarianApplication.Blazor.Services;
@inject IPersonService PersonService
@inject IBorrowService BorrowService
@inject NavigationManager NavigationManager

@if (Borrows is null)
{
    <p>Loading...</p>
}
else
{
    <h3>@Person.Name's borrowed books</h3>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>InventoryNumber</th>
                <th>Borrow Date</th>
                <th>Return Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var borrow in Borrows)
            {
                <tr>
                    <td>@borrow.Title</td>
                    <td>@borrow.BorrowDate</td>
                    <td>@borrow.ReturnDate</td>
                    <td><button class="btn btn-primary" @onclick="() => ReturnBook(borrow.InventoryNumber)">Return</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int MemberId { get; set; }
    private IEnumerable<Borrow>? Borrows { get; set; }

    private Person? Person { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Person = await PersonService.GetPersonByIdAsync(MemberId);
        Borrows = await BorrowService.GetBorrowByNameAsync(Person.Name);
    }

    private async Task ReturnBook(int InventoryNumber)
    {
        IEnumerable<Borrow>? borrowsTmp = await BorrowService.GetAllBorrowsAsync();
        await BorrowService.DeleteBorrowsAsync(borrowsTmp.First(x => x.InventoryNumber == InventoryNumber).Id);
        NavigationManager.NavigateTo($"/books/return/{MemberId}",true);
    }
}
